#!/bin/bash

# AI Tutor Unified Command Script
# A single entry point for all AI Tutor operations

# ===== Load Environment Variables =====
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
ENV_FILE="$SCRIPT_DIR/.env"
ENV_EXAMPLE_FILE="$SCRIPT_DIR/.env.example"

# Check if .env file exists, if not create it from example
if [ ! -f "$ENV_FILE" ] && [ -f "$ENV_EXAMPLE_FILE" ]; then
  echo "Creating .env file from .env.example"
  cp "$ENV_EXAMPLE_FILE" "$ENV_FILE"
  echo "Please edit .env file with your configuration"
fi

# Load environment variables from .env file
if [ -f "$ENV_FILE" ]; then
  echo "Loading environment variables from .env file"
  set -a
  source "$ENV_FILE"
  set +a
fi

# ===== Configuration =====
VERSION="${APP_VERSION:-1.0.0}"
CONFIG_DIR="$SCRIPT_DIR/config"
MODULES_DIR="$SCRIPT_DIR/scripts/modules"
LOGS_DIR="$SCRIPT_DIR/logs"
NEXTJS_PORT="${NEXTJS_PORT:-3000}"
PHP_PORT="${PHP_PORT:-8000}"
LOG_LEVEL="${LOG_LEVEL:-info}"

# ===== Colors and Formatting =====
# Text colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Text formatting
BOLD='\033[1m'
UNDERLINE='\033[4m'
BLINK='\033[5m'

# ===== Create required directories =====
mkdir -p "$LOGS_DIR"
mkdir -p "$CONFIG_DIR"
mkdir -p "$MODULES_DIR"

# ===== Helper Functions =====
show_header() {
  clear
  echo -e "${BLUE}╔════════════════════════════════════════╗${NC}"
  echo -e "${BLUE}║       ${WHITE}${BOLD}AI Tutor Command Center${NC}${BLUE}        ║${NC}"
  echo -e "${BLUE}║       ${CYAN}Version: ${VERSION}${BLUE}                ║${NC}"
  echo -e "${BLUE}╚════════════════════════════════════════╝${NC}"
  echo ""
}

show_spinner() {
  local pid=$1
  local message=$2
  local delay=0.1
  local spinstr='|/-\'

  echo -ne "${YELLOW}$message... ${NC}"

  while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
    local temp=${spinstr#?}
    printf " [%c]  " "$spinstr"
    local spinstr=$temp${spinstr%"$temp"}
    sleep $delay
    printf "\b\b\b\b\b\b"
  done

  printf "    \b\b\b\b"
  echo -e "${GREEN}Done!${NC}"
}

show_progress() {
  local duration=$1
  local message=$2
  local elapsed=0
  local progress=0
  local bar_size=40

  echo -e "${YELLOW}$message${NC}"

  while [ $elapsed -lt $duration ]; do
    # Calculate progress percentage
    progress=$(( (elapsed * 100) / duration ))

    # Calculate number of filled and empty slots in the progress bar
    filled=$(( (progress * bar_size) / 100 ))
    empty=$(( bar_size - filled ))

    # Build the progress bar
    bar="["
    for ((i=0; i<filled; i++)); do
      bar="${bar}█"
    done
    for ((i=0; i<empty; i++)); do
      bar="${bar} "
    done
    bar="${bar}]"

    # Print the progress bar
    printf "\r${CYAN}%s %3d%% %s${NC}" "$bar" "$progress" ""

    sleep 1
    ((elapsed++))
  done

  # Complete the progress bar
  printf "\r${GREEN}[%-${bar_size}s] 100%% ${NC}\n" "$(printf '%0.s█' $(seq 1 $bar_size))"
}

log_message() {
  local level=$1
  local message=$2
  local log_file="$LOGS_DIR/ai-tutor.log"
  local timestamp=$(date "+%Y-%m-%d %H:%M:%S")

  # Log to file
  echo "[$timestamp] [$level] $message" >> "$log_file"

  # Log to console with color based on level
  case $level in
    INFO)
      echo -e "${CYAN}[$level]${NC} $message"
      ;;
    WARNING)
      echo -e "${YELLOW}[$level]${NC} $message"
      ;;
    ERROR)
      echo -e "${RED}[$level]${NC} $message"
      ;;
    SUCCESS)
      echo -e "${GREEN}[$level]${NC} $message"
      ;;
    *)
      echo -e "[$level] $message"
      ;;
  esac
}

# ===== Command Functions =====
cmd_dev() {
  show_header
  log_message "INFO" "Starting AI Tutor in development mode"

  # Start PHP server in the background with custom logging
  log_message "INFO" "Starting PHP backend on port $PHP_PORT"
  cd "$SCRIPT_DIR/php-backend" && php -S localhost:$PHP_PORT router.php 2>&1 | sed 's/^/[PHP] /' &
  PHP_PID=$!

  # Wait a moment to ensure PHP server starts
  sleep 1

  # Start Next.js app with custom logging
  log_message "INFO" "Starting Next.js app on port $NEXTJS_PORT"
  cd "$SCRIPT_DIR" && NEXTJS_PORT=$NEXTJS_PORT bun run dev

  # When Next.js is terminated, also kill the PHP server
  kill $PHP_PID 2>/dev/null
  log_message "INFO" "Development servers stopped"
}

cmd_start() {
  show_header
  log_message "INFO" "Starting AI Tutor in production mode"

  # Start PHP server in the background with custom logging
  log_message "INFO" "Starting PHP backend on port $PHP_PORT"
  cd "$SCRIPT_DIR/php-backend" && php -S localhost:$PHP_PORT router.php 2>&1 | sed 's/^/[PHP] /' &
  PHP_PID=$!

  # Wait a moment to ensure PHP server starts
  sleep 1

  # Start Next.js app in production mode
  log_message "INFO" "Starting Next.js app on port $NEXTJS_PORT"
  cd "$SCRIPT_DIR" && NEXTJS_PORT=$NEXTJS_PORT bun run start

  # When Next.js is terminated, also kill the PHP server
  kill $PHP_PID 2>/dev/null
  log_message "INFO" "Production servers stopped"
}

cmd_setup() {
  show_header
  log_message "INFO" "Setting up AI Tutor"

  # Check for required dependencies
  log_message "INFO" "Checking dependencies"

  MISSING_DEPS=false

  if ! command -v bun >/dev/null 2>&1; then
    log_message "ERROR" "Bun is not installed. Please install Bun first."
    echo "Visit https://bun.sh/ for installation instructions."
    MISSING_DEPS=true
  fi

  if ! command -v php >/dev/null 2>&1; then
    log_message "ERROR" "PHP is not installed. Please install PHP first."
    echo "Run: sudo apt install php php-pgsql php-curl"
    MISSING_DEPS=true
  fi

  if ! command -v node >/dev/null 2>&1; then
    log_message "WARNING" "Node.js is not installed. Some features might not work correctly."
  fi

  if [ "$MISSING_DEPS" = true ]; then
    log_message "ERROR" "Please install the missing dependencies and run this script again."
    exit 1
  fi

  log_message "SUCCESS" "All required dependencies are installed."

  # Create enhanced PHP router with logging
  log_message "INFO" "Creating enhanced PHP router"
  cat > "$SCRIPT_DIR/php-backend/router.php" << EOF
<?php
// Enhanced router for PHP backend with logging
ini_set('display_errors', ${PHP_DISPLAY_ERRORS:-1});
ini_set('display_startup_errors', ${PHP_DISPLAY_ERRORS:-1});
error_reporting(${PHP_ERROR_REPORTING:-E_ALL});

// Log the request with [PHP] prefix
$requestTime = date('Y-m-d H:i:s');
$requestMethod = $_SERVER['REQUEST_METHOD'];
$requestUri = $_SERVER['REQUEST_URI'];
$requestIp = $_SERVER['REMOTE_ADDR'];

// Print log with [PHP] prefix for easy identification
error_log("[PHP] $requestTime - $requestMethod $requestUri - $requestIp");
echo "\033[36m[PHP]\033[0m $requestMethod $requestUri\n";

// Static files should be served directly
if (preg_match('/\.(?:png|jpg|jpeg|gif|css|js)$/', $_SERVER["REQUEST_URI"])) {
    return false; // Serve the requested file as-is
}

// Route everything else to index.php
require __DIR__ . '/index.php';
EOF

  log_message "SUCCESS" "Enhanced PHP router created."

  # Create Azure-optimized Nginx configuration
  log_message "INFO" "Creating Azure-optimized Nginx configuration"
  mkdir -p "$CONFIG_DIR"
  cat > "$CONFIG_DIR/nginx.conf" << EOF
server {
    listen 80;
    server_name ${NGINX_SERVER_NAME:-_};  # Will be replaced with your domain or IP

    # Logging configuration
    access_log /var/log/nginx/ai-tutor-access.log;
    error_log /var/log/nginx/ai-tutor-error.log;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";
    add_header Referrer-Policy "strict-origin-when-cross-origin";

    # Gzip compression
    gzip on;
    gzip_comp_level 5;
    gzip_min_length 256;
    gzip_proxied any;
    gzip_types
        application/javascript
        application/json
        application/xml
        text/css
        text/plain
        text/xml;

    # Next.js application
    location / {
        proxy_pass http://localhost:${NEXTJS_PORT:-3000};
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Add custom header to identify Next.js backend in logs
        add_header X-Backend "NextJS";
    }

    # PHP backend for specific endpoints
    location ~ ^/api/(notes|bookmarks|user-progress|knowledge-test|test)$ {
        proxy_pass http://localhost:${PHP_PORT:-8000};
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Add custom header to identify PHP backend in logs
        add_header X-Backend "PHP";
    }

    # Static assets caching
    location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
        proxy_pass http://localhost:${NEXTJS_PORT:-3000};
        expires 30d;
        add_header Cache-Control "public, no-transform";
    }
}
EOF

  log_message "SUCCESS" "Created Azure-optimized Nginx configuration."

  # Create PM2 ecosystem file for Azure
  log_message "INFO" "Creating PM2 ecosystem file for Azure"
  cat > "$CONFIG_DIR/ecosystem.config.js" << EOF
module.exports = {
  apps: [
    {
      name: "ai-tutor-nextjs",
      script: "bun",
      args: "run start",
      env: {
        NODE_ENV: "production",
        PORT: ${NEXTJS_PORT:-3000}
      },
      instances: 1,
      autorestart: true,
      watch: false,
      max_memory_restart: "1G",
      log_date_format: "YYYY-MM-DD HH:mm:ss",
      merge_logs: true,
      log_file: "logs/nextjs.log",
      out_file: "logs/nextjs-out.log",
      error_file: "logs/nextjs-error.log",
    },
    {
      name: "ai-tutor-php",
      script: "php",
      args: "-S localhost:${PHP_PORT:-8000} router.php",
      cwd: "./php-backend",
      instances: 1,
      autorestart: true,
      watch: false,
      max_memory_restart: "256M",
      log_date_format: "YYYY-MM-DD HH:mm:ss",
      merge_logs: true,
      log_file: "logs/php.log",
      out_file: "logs/php-out.log",
      error_file: "logs/php-error.log",
    },
  ],
};
EOF

  log_message "SUCCESS" "Created PM2 ecosystem file for Azure."

  # Update package.json with better script names
  log_message "INFO" "Updating package.json with intuitive script names"
  if command -v jq >/dev/null 2>&1; then
    # Use jq if available
    jq '.scripts."dev:dual" = "./ai-tutor dev" |
        .scripts."dev:php" = "cd php-backend && php -S localhost:'${PHP_PORT:-8000}' router.php" |
        .scripts."start:dual" = "./ai-tutor start" |
        .scripts."setup:all" = "./ai-tutor setup" |
        .scripts."setup:azure" = "sudo ./ai-tutor azure"' package.json > package.json.tmp
    mv package.json.tmp package.json
    log_message "SUCCESS" "Updated package.json with intuitive script names."
  else
    log_message "WARNING" "jq is not installed. Manual update of package.json required."
    echo -e "${YELLOW}Please add these scripts to your package.json:${NC}"
    echo '  "dev:dual": "./ai-tutor dev",'
    echo '  "dev:php": "cd php-backend && php -S localhost:8000 router.php",'
    echo '  "start:dual": "./ai-tutor start",'
    echo '  "setup:all": "./ai-tutor setup",'
    echo '  "setup:azure": "sudo ./ai-tutor azure",'
  fi

  log_message "SUCCESS" "Setup completed successfully!"
  echo ""
  echo -e "${GREEN}To run both backends in development mode:${NC}"
  echo -e "  ${YELLOW}./ai-tutor dev${NC} or ${YELLOW}bun run dev:dual${NC}"
  echo ""
  echo -e "${GREEN}To run both backends in production mode:${NC}"
  echo -e "  ${YELLOW}./ai-tutor start${NC} or ${YELLOW}bun run start:dual${NC}"
  echo ""
  echo -e "${GREEN}To deploy on Azure VPS:${NC}"
  echo -e "  ${YELLOW}sudo ./ai-tutor azure${NC} or ${YELLOW}bun run setup:azure${NC}"
  echo ""
}

cmd_azure() {
  show_header

  # Check if running as root
  if [[ $EUID -ne 0 ]]; then
     log_message "ERROR" "This command must be run as root"
     exit 1
  fi

  log_message "INFO" "Setting up AI Tutor on Azure VPS"

  # Update system
  log_message "INFO" "Updating system packages"
  apt update && apt upgrade -y

  # Install required packages
  log_message "INFO" "Installing required packages"
  apt install -y nginx php-fpm php-pgsql php-curl php-json curl

  # Install Node.js and npm
  log_message "INFO" "Installing Node.js and npm"
  curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
  apt install -y nodejs

  # Install PM2
  log_message "INFO" "Installing PM2"
  npm install -g pm2

  # Install Bun
  log_message "INFO" "Installing Bun"
  curl -fsSL https://bun.sh/install | bash
  source /root/.bashrc

  # Create logs directory
  log_message "INFO" "Creating logs directory"
  mkdir -p "$SCRIPT_DIR/logs"

  # Configure Nginx
  log_message "INFO" "Configuring Nginx"
  cp "$CONFIG_DIR/nginx.conf" /etc/nginx/sites-available/ai-tutor

  # Remove default site if it exists
  if [ -f "/etc/nginx/sites-enabled/default" ]; then
    rm /etc/nginx/sites-enabled/default
  fi

  # Enable AI Tutor site
  if [ -f "/etc/nginx/sites-enabled/ai-tutor" ]; then
    rm /etc/nginx/sites-enabled/ai-tutor
  fi
  ln -s /etc/nginx/sites-available/ai-tutor /etc/nginx/sites-enabled/

  # Test Nginx configuration
  nginx -t
  if [ $? -eq 0 ]; then
    systemctl restart nginx
    log_message "SUCCESS" "Nginx configured and restarted successfully."
  else
    log_message "ERROR" "Nginx configuration test failed. Please check the configuration."
    exit 1
  fi

  # Configure firewall
  log_message "INFO" "Configuring firewall"
  if command -v ufw &> /dev/null; then
    ufw allow 22/tcp
    ufw allow 80/tcp
    ufw allow 443/tcp

    # Only enable if not already enabled to avoid locking yourself out
    if ! ufw status | grep -q "Status: active"; then
      log_message "WARNING" "Enabling UFW firewall"
      ufw --force enable
    fi

    log_message "SUCCESS" "Firewall configured."
  else
    log_message "WARNING" "UFW not found. Skipping firewall configuration."
  fi

  # Build the Next.js application
  log_message "INFO" "Building Next.js application"
  cd "$SCRIPT_DIR"
  bun install
  bun run build

  # Start the application with PM2
  log_message "INFO" "Starting application with PM2"
  pm2 start "$CONFIG_DIR/ecosystem.config.js"
  pm2 save

  # Configure PM2 to start on boot
  log_message "INFO" "Configuring PM2 to start on boot"
  pm2 startup
  systemctl enable pm2-root

  log_message "SUCCESS" "Setup Complete!"
  echo ""
  echo -e "${GREEN}Your AI Tutor application is now running!${NC}"
  echo -e "You can access it at: ${CYAN}http://$(hostname -I | awk '{print $1}')${NC}"
  echo ""
  echo -e "${GREEN}To monitor the application:${NC}"
  echo -e "  ${YELLOW}pm2 status${NC}"
  echo -e "  ${YELLOW}pm2 logs${NC}"
  echo ""
}

cmd_env() {
  show_header
  echo -e "${WHITE}${BOLD}AI Tutor Environment Configuration${NC}"
  echo ""

  if [ ! -f "$ENV_FILE" ] && [ -f "$ENV_EXAMPLE_FILE" ]; then
    log_message "INFO" "Creating .env file from .env.example"
    cp "$ENV_EXAMPLE_FILE" "$ENV_FILE"
  fi

  if [ ! -f "$ENV_FILE" ]; then
    log_message "ERROR" "No .env file found and no .env.example to copy from"
    exit 1
  fi

  # Check if nano or vim is available
  if command -v nano >/dev/null 2>&1; then
    log_message "INFO" "Opening .env file with nano"
    nano "$ENV_FILE"
  elif command -v vim >/dev/null 2>&1; then
    log_message "INFO" "Opening .env file with vim"
    vim "$ENV_FILE"
  else
    log_message "WARNING" "No editor found. Please edit .env file manually at: $ENV_FILE"
    # Show current .env file content
    echo -e "${CYAN}Current .env file content:${NC}"
    cat "$ENV_FILE"
  fi

  log_message "SUCCESS" "Environment configuration complete"
}

cmd_help() {
  show_header
  echo -e "${WHITE}${BOLD}AI Tutor Command Center Help${NC}"
  echo ""
  echo -e "${CYAN}Usage:${NC} ./ai-tutor [command]"
  echo ""
  echo -e "${CYAN}Available commands:${NC}"
  echo -e "  ${GREEN}dev${NC}      Start AI Tutor in development mode"
  echo -e "  ${GREEN}start${NC}    Start AI Tutor in production mode"
  echo -e "  ${GREEN}setup${NC}    Set up AI Tutor configuration files"
  echo -e "  ${GREEN}env${NC}      Edit environment configuration (.env file)"
  echo -e "  ${GREEN}azure${NC}    Set up AI Tutor on Azure VPS (requires root)"
  echo -e "  ${GREEN}help${NC}     Show this help message"
  echo -e "  ${GREEN}version${NC}  Show version information"
  echo ""
  echo -e "${CYAN}Examples:${NC}"
  echo -e "  ${YELLOW}./ai-tutor dev${NC}     # Start development servers"
  echo -e "  ${YELLOW}./ai-tutor setup${NC}   # Set up configuration files"
  echo -e "  ${YELLOW}sudo ./ai-tutor azure${NC} # Set up on Azure VPS"
  echo ""
}

cmd_version() {
  echo -e "${CYAN}AI Tutor${NC} version ${GREEN}${VERSION}${NC}"
}

# ===== Main Script =====
# Make sure the script is executable
chmod +x "$0"

# Process command line arguments
case "$1" in
  dev)
    cmd_dev
    ;;
  start)
    cmd_start
    ;;
  setup)
    cmd_setup
    ;;
  env)
    cmd_env
    ;;
  azure)
    cmd_azure
    ;;
  help)
    cmd_help
    ;;
  version)
    cmd_version
    ;;
  *)
    if [ -z "$1" ]; then
      # Interactive mode if no arguments provided
      show_header
      echo -e "${WHITE}${BOLD}Welcome to AI Tutor Command Center${NC}"
      echo ""
      echo -e "Please select an option:"
      echo -e "  ${GREEN}1)${NC} Start in development mode"
      echo -e "  ${GREEN}2)${NC} Start in production mode"
      echo -e "  ${GREEN}3)${NC} Set up configuration files"
      echo -e "  ${GREEN}4)${NC} Edit environment configuration (.env)"
      echo -e "  ${GREEN}5)${NC} Set up on Azure VPS"
      echo -e "  ${GREEN}6)${NC} Show help"
      echo -e "  ${GREEN}7)${NC} Exit"
      echo ""
      read -p "Enter your choice [1-7]: " choice

      case $choice in
        1) cmd_dev ;;
        2) cmd_start ;;
        3) cmd_setup ;;
        4) cmd_env ;;
        5) cmd_azure ;;
        6) cmd_help ;;
        7) exit 0 ;;
        *) echo -e "${RED}Invalid option${NC}" ;;
      esac
    else
      echo -e "${RED}Unknown command: $1${NC}"
      echo "Run './ai-tutor help' for usage information."
      exit 1
    fi
    ;;
esac
